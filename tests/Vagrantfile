VAGRANTFILE_API_VERSION = "2"

# Project Settings
  hostname_project = "barc-php5"
  hostname_environment = "test"
  domain_name = "v.m"

Vagrant.configure(VAGRANTFILE_API_VERSION) do |config|

  # Applies to all VMs
      # SSH keys
      # Vagrant will replace the default insecure private key with a new random key, this is more secure
      # but makes the use of provisioner's more difficult (as they don't know which key to use).
      # To fix this, the localhost user's public key is added to the vagrant user's authorized_keys file.
      # Provisioning tools will need to configured to use the localhost user's private key when authenticating.
      config.vm.provision "shell" do |s|
        ssh_pub_key = File.readlines("#{Dir.home}/.ssh/id_rsa.pub").first.strip
        s.inline = <<-SHELL
          echo #{ssh_pub_key} >> /home/vagrant/.ssh/authorized_keys
        SHELL
      end

    # Shared folders
      # /vagrant is not used to ensure consistency across environments [development/staging/production]
      config.vm.synced_folder '.', '/vagrant', disabled: true

    # Network adapters
      config.vm.network "private_network", type: "dhcp"  # Define Networking

    # Automatic hostname registration
      config.hostmanager.enabled = true
      config.hostmanager.manage_host = true
      config.hostmanager.ignore_private_ip = false

    # Fix "stdin: is not a tty" error
      config.ssh.shell = "bash"

  # VMs
  config.vm.define hostname_project + "-" + hostname_environment + "-" + "ubuntu"  + "-" + "bare" + "." + domain_name do |node|

    node.vm.box = "antarctica/trusty"  # Define operating system

    node.vm.hostname = hostname_project + "-" + hostname_environment + "-" + "ubuntu"  + "-" + "bare" + "." + domain_name  # Define hostname
  end

  config.vm.define hostname_project + "-" + hostname_environment + "-" + "centos"  + "-" + "bare" + "." + domain_name do |node|

    node.vm.box = "antarctica/centos7"  # Define operating system

    node.vm.hostname = hostname_project + "-" + hostname_environment + "-" + "centos"  + "-" + "bare" + "." + domain_name  # Define hostname
  end

  config.vm.define hostname_project + "-" + hostname_environment + "-" + "ubuntu"  + "-" + "system-only" + "." + domain_name do |node|

    node.vm.box = "antarctica/trusty"  # Define operating system

    node.vm.hostname = hostname_project + "-" + hostname_environment + "-" + "ubuntu"  + "-" + "system-only" + "." + domain_name  # Define hostname
  end

  config.vm.define hostname_project + "-" + hostname_environment + "-" + "centos"  + "-" + "system-only" + "." + domain_name do |node|

    node.vm.box = "antarctica/centos7"  # Define operating system

    node.vm.hostname = hostname_project + "-" + hostname_environment + "-" + "centos"  + "-" + "system-only" + "." + domain_name  # Define hostname

    # Provision using ansible
      # Due to a bug[1] in Vagrant this block MUST be in the LAST VM specified in this Vagrantfile
      # [1] https://github.com/mitchellh/vagrant/issues/1784

        # Prelude (bootstrap) - get role for performing project setup on local machine
          node.vm.provision "ansible" do |ansible|
            # Standard configuration
              ansible.limit = "all"
            # Playbook specific configuration
              ansible.playbook = "provisioning/prelude-bootstrap.yml"
          end

        # Prelude - run role for performing project setup on local machine
          node.vm.provision "ansible" do |ansible|
            # Standard configuration
              ansible.limit = "all"
            # Playbook specific configuration
              ansible.playbook = "provisioning/prelude.yml"
          end

        # Bootstrap - configure users within project VMs
          node.vm.provision "ansible" do |ansible|
            # Standard configuration
              ansible.limit = "all"
            # Playbook specific configuration
              ansible.playbook = "provisioning/vagrant-bootstrap.yml"
          end
  end
end
